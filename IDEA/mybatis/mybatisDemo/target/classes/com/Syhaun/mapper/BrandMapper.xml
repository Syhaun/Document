<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:名称空间
-->
<mapper namespace="com.Syhaun.mapper.BrandMapper">
    <!--
        数据库表中的字段名称和实体类的属性名称不一样,则不能自动封装数据
            * 起别名:对不一样的列名起别名,让别名和实体类的属性名一样
                *缺点:每次查询都要其别名
                    * sql片段
                        *缺点,不灵活
            * resultMap:
                1.定义<resultMap标签>
                2.在<select>标签中,使用resultMap属性替换 resultType属性
    -->
    <!--
        id: 唯一标识
        type:映射的类型,支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id:完成主键字段的映射
                column:表的列名
                property:实体类的属性名
            result:完成一般字段的映射
                column:表的列名
                property:实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>
    <!--  <sql id="brand_column">
          id, brand_name as brandName, company_name as companyName, ordered, description, status
      </sql>
      <select id="selectAll" resultType="com.Syhaun.pojo.Brand">
      select id, brand_name as brandName, company_name as companyName, ordered, description, status from tb_brand;
      </select>
  -->
    <!--    参数类型  parameterType  可不写-->

    <!--    特殊字符的处理:比如   <   -->
    <!--
        1.转移字符:
        2.CDATA区:
    -->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>
    <!--    条件查询-->
    <!--<select id="selectByCondition" resultMap="brandResultMap">
    select *
    from tb_brand
    where status = #{status}
     and company_name like #{companyName}
     and brand_name like #{brandName}
    </select>-->
    <!--    动态sql-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <if test="status != null">
            status = #{status}
        </if>
        <if test="companyName != null and companyName != ''">
            and company_name like #{companyName}
        </if>
        <if test="brandName != null and brandName != ''">
            and brand_name like #{brandName}
        </if>
    </select>
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose>
            <when test="status != null">
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''">/*相当于case*/
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''">/*相当于case*/
                brand_name like #{brandName}
            </when>
            <otherwise>/*相当于default*/
                1 = 1 /* 或其他适合的默认条件 */
            </otherwise>
        </choose>
    </select>
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test=" ordered != null and  ordered != ''">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <delete id="deleteById">
    delete    from  tb_brand where id = #{id}
    </delete>

    <!--mybatis会将数据参数,封装为一个Map集合
    *默认:array = 数组
    *使用@param注解改变map集合的默认人key的名称
    -->
    <delete id="deleteByIds">
        delete  from tb_brand where id
        in(
            <foreach collection="array" item="id" separator=",">
                #{id}
            </foreach>
             );
    </delete>
</mapper>